{"docsUrl":"https://lamnhan.com/seminjecto","recordMenu":{"README.md":{"title":"Readme","level":1,"articleId":"README.md","type":"file","ext":"md","slug":"README"},"README.md#introduction":{"title":"Introduction","level":2,"articleId":"README.md","fragment":"introduction","type":"file","ext":"md","slug":"README"},"README.md#benefits":{"title":"Benefits","level":2,"articleId":"README.md","fragment":"benefits","type":"file","ext":"md","slug":"README"},"README.md#installation":{"title":"Installation","level":2,"articleId":"README.md","fragment":"installation","type":"file","ext":"md","slug":"README"},"README.md#skeletons":{"title":"Skeletons","level":2,"articleId":"README.md","fragment":"skeletons","type":"file","ext":"md","slug":"README"},"README.md#convention":{"title":"Convention","level":2,"articleId":"README.md","fragment":"convention","type":"file","ext":"md","slug":"README"},"README.md#helpers":{"title":"Helpers","level":3,"articleId":"README.md","fragment":"helpers","type":"file","ext":"md","slug":"README"},"README.md#vscode":{"title":"VSCode","level":4,"articleId":"README.md","fragment":"vscode","type":"file","ext":"md","slug":"README"},"README.md#git":{"title":"GIT","level":4,"articleId":"README.md","fragment":"git","type":"file","ext":"md","slug":"README"},"README.md#linter-prettier":{"title":"Linter/prettier","level":4,"articleId":"README.md","fragment":"linter-prettier","type":"file","ext":"md","slug":"README"},"README.md#documentation":{"title":"Documentation","level":4,"articleId":"README.md","fragment":"documentation","type":"file","ext":"md","slug":"README"},"README.md#testing":{"title":"Testing","level":4,"articleId":"README.md","fragment":"testing","type":"file","ext":"md","slug":"README"},"README.md#continuous-integration":{"title":"Continuous integration","level":4,"articleId":"README.md","fragment":"continuous-integration","type":"file","ext":"md","slug":"README"},"README.md#vendor-code":{"title":"Vendor code","level":4,"articleId":"README.md","fragment":"vendor-code","type":"file","ext":"md","slug":"README"},"README.md#special-deployment":{"title":"Special deployment","level":4,"articleId":"README.md","fragment":"special-deployment","type":"file","ext":"md","slug":"README"},"README.md#project-types":{"title":"Project types","level":3,"articleId":"README.md","fragment":"project-types","type":"file","ext":"md","slug":"README"},"README.md#library":{"title":"Library","level":4,"articleId":"README.md","fragment":"library","type":"file","ext":"md","slug":"README"},"README.md#cli":{"title":"CLI","level":4,"articleId":"README.md","fragment":"cli","type":"file","ext":"md","slug":"README"},"README.md#express":{"title":"Express","level":4,"articleId":"README.md","fragment":"express","type":"file","ext":"md","slug":"README"},"README.md#sheetbase":{"title":"Sheetbase","level":4,"articleId":"README.md","fragment":"sheetbase","type":"file","ext":"md","slug":"README"},"README.md#workspace":{"title":"Workspace","level":4,"articleId":"README.md","fragment":"workspace","type":"file","ext":"md","slug":"README"},"README.md#cli-command-overview":{"title":"Command overview","level":2,"articleId":"README.md","fragment":"cli-command-overview","type":"file","ext":"md","slug":"README"},"README.md#cli-command-reference":{"title":"Command reference","level":2,"articleId":"README.md","fragment":"cli-command-reference","type":"file","ext":"md","slug":"README"},"README.md#command-clean":{"title":"`clean`","level":3,"articleId":"README.md","fragment":"command-clean","type":"file","ext":"md","slug":"README"},"README.md#command-generate":{"title":"`generate`","level":3,"articleId":"README.md","fragment":"command-generate","type":"file","ext":"md","slug":"README"},"README.md#command-new":{"title":"`new`","level":3,"articleId":"README.md","fragment":"command-new","type":"file","ext":"md","slug":"README"},"README.md#command-help":{"title":"`help`","level":3,"articleId":"README.md","fragment":"command-help","type":"file","ext":"md","slug":"README"},"README.md#command-*":{"title":"`*`","level":3,"articleId":"README.md","fragment":"command-*","type":"file","ext":"md","slug":"README"},"README.md#":{"title":"Detail API reference","level":2,"articleId":"README.md","fragment":"","type":"file","ext":"md","slug":"README"}},"recordArticles":{"README.md":{"title":"Readme","originalSrc":"","src":"https://lamnhan.com/seminjecto/api/articles/README.md","type":"file","ext":"md","slug":"README","content":"<section id=\"head\" data-note=\"AUTO-GENERATED CONTENT, DO NOT EDIT DIRECTLY!\">\n\n# @lamnhan/seminjecto\n\n**Simple dependency injection for Typescript modules.**\n\n</section>\n\n<section id=\"header\">\n\n[![License][license_badge]][license_url]\n[![Code Style: Google](https://img.shields.io/badge/code%20style-google-blueviolet.svg)](https://github.com/google/gts)\n[![Support me on Patreon][patreon_badge]][patreon_url]\n[![PayPal][paypal_donate_badge]][paypal_donate_url]\n[![Ask me anything][ask_me_badge]][ask_me_url]\n\n[license_badge]: https://img.shields.io/github/license/mashape/apistatus.svg\n[license_url]: https://github.com/lamnhan/seminjecto/blob/master/LICENSE\n[patreon_badge]: https://lamnhan.github.io/assets/images/badges/patreon.svg\n[patreon_url]: https://www.patreon.com/lamnhan\n[paypal_donate_badge]: https://lamnhan.github.io/assets/images/badges/paypal_donate.svg\n[paypal_donate_url]: https://www.paypal.me/lamnhan\n[ask_me_badge]: https://img.shields.io/badge/ask/me-anything-1abc9c.svg\n[ask_me_url]: https://m.me/lamhiennhan\n\n</section>\n\n<section id=\"tocx\" data-note=\"AUTO-GENERATED CONTENT, DO NOT EDIT DIRECTLY!\">\n\n- [Introduction](#introduction)\n- [Benefits](#benefits)\n- [Installation](#installation)\n- [Skeletons](#skeletons)\n- [Convention](#convention)\n  - [Helpers](#helpers)\n    - [VSCode](#vscode)\n    - [GIT](#git)\n    - [Linter/prettier](#linter-prettier)\n    - [Documentation](#documentation)\n    - [Testing](#testing)\n    - [Continuous integration](#continuous-integration)\n    - [Vendor code](#vendor-code)\n    - [Special deployment](#special-deployment)\n  - [Project types](#project-types)\n    - [Library](#library)\n    - [CLI](#cli)\n    - [Express](#express)\n    - [Sheetbase](#sheetbase)\n    - [Workspace](#workspace)\n- [Command overview](#cli-command-overview)\n- [Command reference](#cli-command-reference)\n  - [`clean`](#command-clean)\n  - [`generate`](#command-generate)\n  - [`new`](#command-new)\n  - [`help`](#command-help)\n  - [`*`](#command-*)\n- [Detail API reference](https://lamnhan.com/seminjecto)\n\n\n</section>\n\n<section id=\"main\">\n\n## Introduction\n\nDependency injection is a common method for structuring modules. It is native in frontend frameworks like Angular and can be used for any JS modules in the same manner using library like [InversifyJS](http://inversify.io/), [tsyringe](https://github.com/microsoft/tsyringe), ...\n\nBut you can also manually apply DI to any module using this simple method. There is a central class (`Lib` for library, `Cli` for cli app, `App` for app, ...) that acts as a DI container and injector.\n\n```ts\n// the service 1\nexport class Service1Service {}\n\n// the service 2 is depends on the service 1\nexport class Service2Service {\n  constructor(private service1Service: Service1Service) {}\n}\n\n// the container for all services and also the injetor\nexport class Lib {\n  service1Service: Service1Service;\n  service2Service: Service2Service;\n\n  constructor() {\n    this.service1Service = new Service1Service();\n    this.service2Service = new Service2Service(\n      this.service1Service // injects the service 1\n    );\n  }\n}\n```\n\n## Benefits\n\n- One approaching for any project\n- Clean project structure\n- No need for extra IOC libraries\n- Easy to test (using [@lamnhan/testea](https://github.com/lamnhan/testea))\n- Easy to generate documentation (using [@lamnhan/ayedocs](https://github.com/lamnhan/ayedocs))\n\n## Installation\n\nInstall as glocal CLI app.\n\n```sh\nnpm install -g @lamnhan/seminjecto\n```\n\n## Skeletons\n\nThese skeletons can be use to faster setup a project. You can either clone them manually or using the command [`semidi new <name>`](#command-new):\n\n- [Library](https://github.com/lamnhan/seminjecto-lib): Any library.\n- [CLI](https://github.com/lamnhan/seminjecto-cli): Node CLI app.\n- [Express](https://github.com/lamnhan/seminjecto-express): ExpressJS app.\n- [Sheetbase](https://github.com/lamnhan/seminjecto-sheetbase): Sheetbase server app.\n- [Workspace](https://github.com/lamnhan/seminjecto-workspace): Google Workspace (G Suite) add-on.\n\n## Convention\n\nThis standalization is applied to any project unders **Seminjecto** convention.\n\n### Helpers\n\n#### VSCode\n\nThe file `settings.json` unders `.vscode` folder provides configuration for excluding certain content in VSCode (and other configs you may need):\n\nSee [.vscode/settings.json](https://github.com/lamnhan/seminjecto/blob/master/.vscode/settings.json)\n\n#### GIT\n\nFiles are ignored by GIT:\n\nSee [.gitignore](https://github.com/lamnhan/seminjecto/blob/master/.gitignore)\n\n#### Linter/prettier\n\nLinter and prettier using [@google/gts](https://github.com/google/gts):\n\n- The `.eslintrc.json`: the Eslint config file\n- The `.prettierrc.js`: the Prettier config file\n- Lint by: `npm run lint`\n\n#### Documentation\n\nAutomatic document generation using [@lamnhan/ayedocs](https://github.com/lamnhan/ayedocs):\n\n- The file `.ayedocsrc.js` provides configuration\n- Output will be found in the `docs` folder\n- Generate docs by: `npm run docs`\n\n#### Testing\n\nTesting using [@lamnhan/testea](https://github.com/lamnhan/testea):\n\n- Generate spec files by: `testea generate`\n- All specs files are under `test` folder\n- Run test by: `npm run test`\n\n#### Continuous integration\n\nSee [.travis.yml](https://github.com/lamnhan/seminjecto/blob/master/.travis.yml)\n\n#### Vendor code\n\nWhen you want to include code from other projects, put them into `src/lib/vendors/name.vendor.ts`. For example, a function from `lodash`.\n\nAdd `// @ts-nocheck` at the top of the files to disable Typescript.\n\nVendor files also excluded from linting.\n\n#### Special deployment\n\nLibraries for Node projects are deployed with the `src/` folder that contains all the content.\n\nSpecial project will be deployed from the `.deploy/` folder:\n\n- Refer using a script (... deploy) to generate `.deploy/`, then deploy, then remove `.deploy/`.\n- Pass `--dry-run` to the script to generate `.deploy/` only.\n\n### Project types\n\n**Seminjecto** supports these types of Node project, where source code is hosted under `src` folder.\n\n#### Library\n\nA library is a project that can using in other projects.\n\nA library is organized into a pair of file and folder:\n\n- The `public-api.ts` file: where you export anything you want other project to access\n- The `lib` folder: the lirary home, contains `index.ts` (class `Lib`) and groups of source code by type (services, ...)\n\nSee [package.json](https://github.com/lamnhan/seminjecto/blob/master/package.json) for properties and scripts.\n\n#### CLI\n\nA CLI project is an extended of library, a pair of file and folder added:\n\n- The `bin.ts` file: the cli logic\n- The `cli` folder: the CLI home, contains `index.ts` (class `Cli`) and groups of source code by type (commands, ...)\n\nSee `bin` property in [package.json](https://github.com/lamnhan/seminjecto/blob/master/package.json) for CLI app registration.\n\n#### Express\n\nA ExpressJS project is an extended of library, a pair of file and folder added:\n\n- The `www.ts` file: the app logic\n- The `app` folder: the app home, contains `index.ts` (class `App`) and groups of source code by type (routes, ...)\n\n#### Sheetbase\n\nA Sheetbase project is an extended of library, a pair of file and folder added:\n\n- The `www.ts` file: the app logic\n- The `app` folder: the app home, contains `index.ts` (class `App`) and groups of source code by type (routes, ...)\n\n#### Workspace\n\nA Workspace project is an extended of library, a pair of file and folder added:\n\n- The `hook.ts` file: the addon logic\n- The `addon` folder: the addon home, contains `index.ts` (class `Addon`) and groups of source code by type (sidebars, modals, ...)\n\n</section>\n\n<section id=\"cli\" data-note=\"AUTO-GENERATED CONTENT, DO NOT EDIT DIRECTLY!\">\n\n<h2><a name=\"cli-command-overview\"><p>Command overview</p>\n</a></h2>\n\nSimple dependency injection for Typescript modules.\n\n- [`semidi clean|c --skip-question --list --includes [value] --excludes [value]`](#command-clean)\n- [`semidi generate|create|g <type> <dest> --nested --typing`](#command-generate)\n- [`semidi new|start|n <type> <name> [description] --source [value] --skip-install --skip-git`](#command-new)\n- [`semidi help`](#command-help)\n- [`semidi *`](#command-*)\n\n<h2><a name=\"cli-command-reference\"><p>Command reference</p>\n</a></h2>\n\n<h3><a name=\"command-clean\"><p><code>clean</code></p>\n</a></h3>\n\nClean typescript output files.\n\n**Usage:**\n\n```sh\nsemidi clean --skip-question --list --includes [value] --excludes [value]\nsemidi c --skip-question --list --includes [value] --excludes [value]\n```\n\n**Options:**\n\n- `-y, --skip-question`: Does not ask question.\n- `-l, --list`: Show list of files.\n- `-i, --includes [value]`: Including files, separated by `|`.\n- `-e, --excludes [value]`: Excluding files, separated by `|`.\n\n<h3><a name=\"command-generate\"><p><code>generate</code></p>\n</a></h3>\n\nGenerate a resource.\n\n**Usage:**\n\n```sh\nsemidi generate <type> <dest> --nested --typing\nsemidi create <type> <dest> --nested --typing\nsemidi g <type> <dest> --nested --typing\n```\n\n**Parameters:**\n\n- `<type>`: The resource type\n- `<dest>`: The resource destination\n\n**Options:**\n\n- `-n, --nested`: Nested under a folder.\n- `-t, --typing`: Save typing file.\n\n<h3><a name=\"command-new\"><p><code>new</code></p>\n</a></h3>\n\nCreate a new project.\n\n**Usage:**\n\n```sh\nsemidi new <type> <name> [description] --source [value] --skip-install --skip-git\nsemidi start <type> <name> [description] --source [value] --skip-install --skip-git\nsemidi n <type> <name> [description] --source [value] --skip-install --skip-git\n```\n\n**Parameters:**\n\n- `<type>`: The project type: lib, cli, sheetbase, ... or {any}.\n- `<name>`: The project name.\n- `[description]`: The project description.\n\n**Options:**\n\n- `-s, --source [value]`: Custom sources.\n- `-i, --skip-install`: Does not install dependency packages.\n- `-g, --skip-git`: Does not initialize a git repository.\n\n<h3><a name=\"command-help\"><p><code>help</code></p>\n</a></h3>\n\nDisplay help.\n\n**Usage:**\n\n```sh\nsemidi help\n```\n\n<h3><a name=\"command-*\"><p><code>*</code></p>\n</a></h3>\n\nAny other command is not suppoted.\n\n**Usage:**\n\n```sh\nsemidi <cmd>\n```\n\n</section>\n\n<section id=\"license\" data-note=\"AUTO-GENERATED CONTENT, DO NOT EDIT DIRECTLY!\">\n\n## License\n\n**@lamnhan/seminjecto** is released under the [MIT](https://github.com/lamnhan/seminjecto/blob/master/LICENSE) license.\n\n</section>\n\n<section id=\"attr\">\n\n---\n\n⚡️ This document is generated automatically using [@lamnhan/ayedocs](https://github.com/lamnhan/ayedocs).\n\n</section>\n"}}}
